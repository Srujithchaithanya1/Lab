ES6
## Arrow
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Functions</h1>
<h2>The Arrow Function</h2>

<!-- <p>This example shows an Arrow Function with a parameter.</p> -->

<p id="demo"></p>

<script>
let hello = "";

hello = (val) => "Hello " + val;
let n = prompt("Enter your name : ")
document.getElementById("demo").innerHTML = hello(n);
</script>

</body>
</html>


## Callback
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Call Back</h2>

<!-- <p>JavaScript functions are executed in the sequence they are called.</p> -->



<script>
    function greeting(name) {
  alert(`Hello, ${name}`);
}

function processUserInput(callback) {
  const name = prompt("Please enter your name.");
  callback(name);
}

processUserInput(greeting);

</script>

</body>
</html>

## Promises
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Promise</h2>

<!-- <p>Wait 3 seconds (3000 milliseconds) for this page to change.</p> -->

<h1 id="demo"></h1>

<script>
const myPromise = new Promise(function(myResolve, myReject) {
  setTimeout(function(){ myResolve("HELLO WORLD!!"); }, 3000);
});

myPromise.then(function(value) {
  document.getElementById("demo").innerHTML = value;
});
</script>

</body>
</html>


## Async/Await
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript async / await</h2>



<script>
async function myDisplay() {
  var y = await "Hello World";
  console.log(y);
  }
console.log(1);
myDisplay();
console.log(2);
</script>

</body>
</html>